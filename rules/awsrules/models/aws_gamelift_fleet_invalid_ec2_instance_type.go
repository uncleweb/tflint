// This file generated by `tools/model-rule-gen/main.go`. DO NOT EDIT

package models

import (
	"log"

	"github.com/hashicorp/hcl2/hcl"
	"github.com/uncleweb/tflint/tflint"
)

// AwsGameliftFleetInvalidEc2InstanceTypeRule checks the pattern is valid
type AwsGameliftFleetInvalidEc2InstanceTypeRule struct {
	resourceType  string
	attributeName string
	enum          []string
}

// NewAwsGameliftFleetInvalidEc2InstanceTypeRule returns new rule with default attributes
func NewAwsGameliftFleetInvalidEc2InstanceTypeRule() *AwsGameliftFleetInvalidEc2InstanceTypeRule {
	return &AwsGameliftFleetInvalidEc2InstanceTypeRule{
		resourceType:  "aws_gamelift_fleet",
		attributeName: "ec2_instance_type",
		enum: []string{
			"t2.micro",
			"t2.small",
			"t2.medium",
			"t2.large",
			"c3.large",
			"c3.xlarge",
			"c3.2xlarge",
			"c3.4xlarge",
			"c3.8xlarge",
			"c4.large",
			"c4.xlarge",
			"c4.2xlarge",
			"c4.4xlarge",
			"c4.8xlarge",
			"r3.large",
			"r3.xlarge",
			"r3.2xlarge",
			"r3.4xlarge",
			"r3.8xlarge",
			"r4.large",
			"r4.xlarge",
			"r4.2xlarge",
			"r4.4xlarge",
			"r4.8xlarge",
			"r4.16xlarge",
			"m3.medium",
			"m3.large",
			"m3.xlarge",
			"m3.2xlarge",
			"m4.large",
			"m4.xlarge",
			"m4.2xlarge",
			"m4.4xlarge",
			"m4.10xlarge",
		},
	}
}

// Name returns the rule name
func (r *AwsGameliftFleetInvalidEc2InstanceTypeRule) Name() string {
	return "aws_gamelift_fleet_invalid_ec2_instance_type"
}

// Enabled returns whether the rule is enabled by default
func (r *AwsGameliftFleetInvalidEc2InstanceTypeRule) Enabled() bool {
	return true
}

// Severity returns the rule severity
func (r *AwsGameliftFleetInvalidEc2InstanceTypeRule) Severity() string {
	return tflint.ERROR
}

// Link returns the rule reference link
func (r *AwsGameliftFleetInvalidEc2InstanceTypeRule) Link() string {
	return ""
}

// Check checks the pattern is valid
func (r *AwsGameliftFleetInvalidEc2InstanceTypeRule) Check(runner *tflint.Runner) error {
	log.Printf("[INFO] Check `%s` rule for `%s` runner", r.Name(), runner.TFConfigPath())

	return runner.WalkResourceAttributes(r.resourceType, r.attributeName, func(attribute *hcl.Attribute) error {
		var val string
		err := runner.EvaluateExpr(attribute.Expr, &val)

		return runner.EnsureNoError(err, func() error {
			found := false
			for _, item := range r.enum {
				if item == val {
					found = true
				}
			}
			if !found {
				runner.EmitIssue(
					r,
					`ec2_instance_type is not a valid value`,
					attribute.Expr.Range(),
				)
			}
			return nil
		})
	})
}
